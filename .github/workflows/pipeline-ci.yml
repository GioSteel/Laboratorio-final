name: pipeline-ci
on:
  push:
    branches:
      -  labFinalGio*
      
jobs:
  SAST:
    runs-on: 'ubuntu-latest'

    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Config
        run: |
          sonarcloud_create_project=$(curl -s -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' \
            -d 'name=${{ github.event.repository.name }}' \
            -d 'project=${{ github.event.repository.name }}' \
            -d 'organization=${{ secrets.ORG }}' \
            -d 'visibility=public' \
            -w "\n%{http_code}")
          sonarcloud_create_project_status=$(tail -n1 <<< "$sonarcloud_create_project") 
          sonarcloud_create_project_response=$(sed '$ d' <<< "$sonarcloud_create_project")
          if [ $sonarcloud_create_project_status -eq 200 ]; then
            echo "Project ${{ github.event.repository.name }} created successfully on Sonarcloud"
            curl -s -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=${{ secrets.SONAR_PROJECT_KEY }}'
          else
            error_msg=$(echo "$sonarcloud_create_project_response" | jq .errors[].msg | sed -e 's/^"//' -e 's/"$//')
            if [[ "$error_msg" == "Could not create Project, key already exists: ${{ github.event.repository.name }}" ]]; then
              echo "Project already exists on Sonarcloud"
            else
              echo "::error title=API_ERROR::$error_msg"
            fi
          fi

      - name: Install dependencies
        run: npm install

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=${{ secrets.ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  SCA:
    needs: SAST
    runs-on: 'ubuntu-latest'

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install

      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'JSON'
          args: >
            -f HTML
            --disableYarnAudit

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: Dependency-Check Report
          path: ${{github.workspace}}/reports

      - name: Evaluate Dependency-Check Report
        run: |
          critical_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "CRITICAL")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          high_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "HIGH")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          medium_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "MEDIUM")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          if [ $critical_vulnerabilities -gt 0 ] || [ $high_vulnerabilities -gt 0 ] || [ $medium_vulnerabilities -gt 0 ]; then
            echo "::error title=SCA::Have been found $critical_vulnerabilities Vulnerabilities Critical, $high_vulnerabilities Vulnerabilities Major y $medium_vulnerabilities Vulnerabilities Minor."
            exit 1
          else
            echo "Have not been found Vulnerabilities"
          fi  

  Build:
    needs: 'SCA'
    runs-on: 'self-hosted'

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker Login 
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        run: |
          docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} -t giosteel/laboratorio-final:latest .


      - name: Build Docker image
        run: docker build -t giosteel88/laboratorio-final:latest .

      - name: Install Grype
        run: |
          brew tap anchore/grype
          brew install grype

      - name: Scan Docker image with Grype
        run: |
          grype giosteel/laboratorio-final -o json > grype-report.json
          
      - name: Check for vulnerabilities
        run: |
          critical_count=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-report.json)
          high_count=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' grype-report.json)
          medium_count=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' grype-report.json)
          
          echo "Critical vulnerabilities: $critical_count"
          echo "High vulnerabilities: $high_count"
          echo "Medium vulnerabilities: $medium_count"
          
          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 0 ] || [ "$medium_count" -gt 0 ]; then
            echo "Vulnerabilities found! Failing the job."
            exit 1
          fi

      - name: Clean up
        run: rm -f grype-report.json


      - name: Push
        run: |
          docker push giosteel88/laboratorio-final:latest



